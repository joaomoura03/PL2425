
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GE GT ID IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NUMBER OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL RPAREN SEMICOLON STRING STRING_LITERAL THEN TIMES TO TRUE VAR WHILE WRITELNprogram : PROGRAM ID SEMICOLON block DOTblock : declarations BEGIN statements ENDdeclarations : VAR var_declaration_list\n                    | emptyvar_declaration_list : var_declaration SEMICOLON var_declaration_list\n                            | var_declaration SEMICOLONvar_declaration : id_list COLON typeid_list : ID\n               | ID COMMA id_listarray_type : ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF typetype : INTEGER\n            | BOOLEAN\n            | STRING\n            | REAL\n            | array_typestatements : statement SEMICOLON statements\n                  | statementstatement : assignment\n                 | writeln\n                 | readln\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | compound_statement\n                 | emptycompound_statement : BEGIN statements ENDassignment : variable ASSIGN expressionvariable : ID\n                | ID LBRACKET expression RBRACKETwriteln : WRITELN LPAREN expression_list RPARENexpression_list : expression\n                       | expression COMMA expression_listreadln : READLN LPAREN variable RPARENif_statement : IF expression THEN statement\n                    | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementexpression : simple_expression\n                  | simple_expression EQUAL simple_expression\n                  | simple_expression NE simple_expression\n                  | simple_expression LT simple_expression\n                  | simple_expression LE simple_expression\n                  | simple_expression GT simple_expression\n                  | simple_expression GE simple_expressionsimple_expression : term\n                         | simple_expression PLUS term\n                         | simple_expression MINUS term\n                         | simple_expression OR termterm : factor\n            | term TIMES factor\n            | term DIVIDE factor\n            | term DIV factor\n            | term MOD factor\n            | term AND factorfactor : variable\n              | NUMBER\n              | STRING_LITERAL\n              | TRUE\n              | FALSE\n              | LPAREN expression RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,],[0,-1,]),'ID':([2,7,10,15,29,30,31,33,35,38,39,40,41,51,54,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,91,114,115,116,122,123,],[3,14,32,32,32,32,53,14,14,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'SEMICOLON':([3,10,12,15,17,18,19,20,21,22,23,24,25,32,38,43,44,45,46,47,48,49,50,56,57,58,59,60,61,64,66,70,86,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,114,118,122,123,125,126,128,],[4,-62,33,-62,38,-18,-19,-20,-21,-22,-23,-24,-25,-28,-62,-39,-46,-50,-56,-57,-58,-59,-60,-7,-11,-12,-13,-14,-15,-26,-27,-62,-62,-30,-33,-34,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-36,-29,-62,-35,-62,-62,-37,-38,-10,]),'VAR':([4,],[7,]),'BEGIN':([4,6,8,10,11,15,33,38,55,70,86,114,122,123,],[-62,10,-4,15,-3,15,-6,15,-5,15,15,15,15,15,]),'DOT':([5,37,],[9,-2,]),'WRITELN':([10,15,38,70,86,114,122,123,],[27,27,27,27,27,27,27,27,]),'READLN':([10,15,38,70,86,114,122,123,],[28,28,28,28,28,28,28,28,]),'IF':([10,15,38,70,86,114,122,123,],[29,29,29,29,29,29,29,29,]),'WHILE':([10,15,38,70,86,114,122,123,],[30,30,30,30,30,30,30,30,]),'FOR':([10,15,38,70,86,114,122,123,],[31,31,31,31,31,31,31,31,]),'END':([10,15,16,17,18,19,20,21,22,23,24,25,32,36,38,43,44,45,46,47,48,49,50,64,65,66,70,86,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,114,118,122,123,125,126,],[-62,-62,37,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,64,-62,-39,-46,-50,-56,-57,-58,-59,-60,-26,-16,-27,-62,-62,-30,-33,-34,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-36,-29,-62,-35,-62,-62,-37,-38,]),'COLON':([13,14,63,],[34,-8,-9,]),'COMMA':([14,32,43,44,45,46,47,48,49,50,68,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,],[35,-28,-39,-46,-50,-56,-57,-58,-59,-60,91,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'ELSE':([18,19,20,21,22,23,24,25,32,43,44,45,46,47,48,49,50,64,66,70,86,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,114,118,122,123,125,126,],[-18,-19,-20,-21,-22,-23,-24,-25,-28,-39,-46,-50,-56,-57,-58,-59,-60,-26,-27,-62,-62,-30,-33,114,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-36,-29,-62,-35,-62,-62,-37,-38,]),'ASSIGN':([26,32,53,111,],[39,-28,87,-29,]),'LPAREN':([27,28,29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,115,116,],[40,41,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NUMBER':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,89,91,115,116,117,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,112,47,47,47,121,]),'STRING_LITERAL':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,115,116,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,115,116,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,115,116,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'TIMES':([32,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,80,-50,-56,-57,-58,-59,-60,80,80,80,-51,-52,-53,-54,-55,-61,-29,]),'DIVIDE':([32,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,81,-50,-56,-57,-58,-59,-60,81,81,81,-51,-52,-53,-54,-55,-61,-29,]),'DIV':([32,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,82,-50,-56,-57,-58,-59,-60,82,82,82,-51,-52,-53,-54,-55,-61,-29,]),'MOD':([32,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,83,-50,-56,-57,-58,-59,-60,83,83,83,-51,-52,-53,-54,-55,-61,-29,]),'AND':([32,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,84,-50,-56,-57,-58,-59,-60,84,84,84,-51,-52,-53,-54,-55,-61,-29,]),'EQUAL':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,71,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'NE':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,72,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'LT':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,73,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'LE':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,74,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'GT':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,75,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'GE':([32,43,44,45,46,47,48,49,50,100,101,102,103,104,105,106,107,108,111,],[-28,76,-46,-50,-56,-57,-58,-59,-60,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'PLUS':([32,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,],[-28,77,-46,-50,-56,-57,-58,-59,-60,77,77,77,77,77,77,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'MINUS':([32,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,],[-28,78,-46,-50,-56,-57,-58,-59,-60,78,78,78,78,78,78,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'OR':([32,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,],[-28,79,-46,-50,-56,-57,-58,-59,-60,79,79,79,79,79,79,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'THEN':([32,42,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,],[-28,70,-39,-46,-50,-56,-57,-58,-59,-60,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,]),'DO':([32,43,44,45,46,47,48,49,50,52,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,119,120,],[-28,-39,-46,-50,-56,-57,-58,-59,-60,86,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,122,123,]),'RPAREN':([32,43,44,45,46,47,48,49,50,67,68,69,85,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,113,],[-28,-39,-46,-50,-56,-57,-58,-59,-60,90,-31,92,108,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,-32,]),'RBRACKET':([32,43,44,45,46,47,48,49,50,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,121,],[-28,-39,-46,-50,-56,-57,-58,-59,-60,111,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,-29,124,]),'TO':([32,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,],[-28,-39,-46,-50,-56,-57,-58,-59,-60,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,115,-29,]),'DOWNTO':([32,43,44,45,46,47,48,49,50,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,],[-28,-39,-46,-50,-56,-57,-58,-59,-60,-40,-41,-42,-43,-44,-45,-47,-48,-49,-51,-52,-53,-54,-55,-61,116,-29,]),'LBRACKET':([32,62,],[54,89,]),'INTEGER':([34,127,],[57,57,]),'BOOLEAN':([34,127,],[58,58,]),'STRING':([34,127,],[59,59,]),'REAL':([34,127,],[60,60,]),'ARRAY':([34,127,],[62,62,]),'DOTDOT':([112,],[117,]),'OF':([124,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'empty':([4,10,15,38,70,86,114,122,123,],[8,25,25,25,25,25,25,25,25,]),'var_declaration_list':([7,33,],[11,55,]),'var_declaration':([7,33,],[12,12,]),'id_list':([7,33,35,],[13,13,63,]),'statements':([10,15,38,],[16,36,65,]),'statement':([10,15,38,70,86,114,122,123,],[17,17,17,93,109,118,125,126,]),'assignment':([10,15,38,70,86,114,122,123,],[18,18,18,18,18,18,18,18,]),'writeln':([10,15,38,70,86,114,122,123,],[19,19,19,19,19,19,19,19,]),'readln':([10,15,38,70,86,114,122,123,],[20,20,20,20,20,20,20,20,]),'if_statement':([10,15,38,70,86,114,122,123,],[21,21,21,21,21,21,21,21,]),'while_statement':([10,15,38,70,86,114,122,123,],[22,22,22,22,22,22,22,22,]),'for_statement':([10,15,38,70,86,114,122,123,],[23,23,23,23,23,23,23,23,]),'compound_statement':([10,15,38,70,86,114,122,123,],[24,24,24,24,24,24,24,24,]),'variable':([10,15,29,30,38,39,40,41,51,54,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,91,114,115,116,122,123,],[26,26,46,46,26,46,46,69,46,46,26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,26,46,46,26,46,46,26,26,]),'expression':([29,30,39,40,51,54,87,91,115,116,],[42,52,66,68,85,88,110,68,119,120,]),'simple_expression':([29,30,39,40,51,54,71,72,73,74,75,76,87,91,115,116,],[43,43,43,43,43,43,94,95,96,97,98,99,43,43,43,43,]),'term':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,87,91,115,116,],[44,44,44,44,44,44,44,44,44,44,44,44,100,101,102,44,44,44,44,]),'factor':([29,30,39,40,51,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,91,115,116,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,103,104,105,106,107,45,45,45,45,]),'type':([34,127,],[56,128,]),'array_type':([34,127,],[61,61,]),'expression_list':([40,91,],[67,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','parser.py',330),
  ('block -> declarations BEGIN statements END','block',4,'p_block','parser.py',335),
  ('declarations -> VAR var_declaration_list','declarations',2,'p_declarations','parser.py',345),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',346),
  ('var_declaration_list -> var_declaration SEMICOLON var_declaration_list','var_declaration_list',3,'p_var_declaration_list','parser.py',350),
  ('var_declaration_list -> var_declaration SEMICOLON','var_declaration_list',2,'p_var_declaration_list','parser.py',351),
  ('var_declaration -> id_list COLON type','var_declaration',3,'p_var_declaration','parser.py',358),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',384),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','parser.py',385),
  ('array_type -> ARRAY LBRACKET NUMBER DOTDOT NUMBER RBRACKET OF type','array_type',8,'p_array_type','parser.py',392),
  ('type -> INTEGER','type',1,'p_type','parser.py',401),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',402),
  ('type -> STRING','type',1,'p_type','parser.py',403),
  ('type -> REAL','type',1,'p_type','parser.py',404),
  ('type -> array_type','type',1,'p_type','parser.py',405),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','parser.py',410),
  ('statements -> statement','statements',1,'p_statements','parser.py',411),
  ('statement -> assignment','statement',1,'p_statement','parser.py',419),
  ('statement -> writeln','statement',1,'p_statement','parser.py',420),
  ('statement -> readln','statement',1,'p_statement','parser.py',421),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',422),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',423),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',424),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',425),
  ('statement -> empty','statement',1,'p_statement','parser.py',426),
  ('compound_statement -> BEGIN statements END','compound_statement',3,'p_compound_statement','parser.py',431),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','parser.py',436),
  ('variable -> ID','variable',1,'p_variable','parser.py',441),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',442),
  ('writeln -> WRITELN LPAREN expression_list RPAREN','writeln',4,'p_writeln','parser.py',459),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',463),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','parser.py',464),
  ('readln -> READLN LPAREN variable RPAREN','readln',4,'p_readln','parser.py',472),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',477),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',478),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',486),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',491),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',492),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',500),
  ('expression -> simple_expression EQUAL simple_expression','expression',3,'p_expression','parser.py',501),
  ('expression -> simple_expression NE simple_expression','expression',3,'p_expression','parser.py',502),
  ('expression -> simple_expression LT simple_expression','expression',3,'p_expression','parser.py',503),
  ('expression -> simple_expression LE simple_expression','expression',3,'p_expression','parser.py',504),
  ('expression -> simple_expression GT simple_expression','expression',3,'p_expression','parser.py',505),
  ('expression -> simple_expression GE simple_expression','expression',3,'p_expression','parser.py',506),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',513),
  ('simple_expression -> simple_expression PLUS term','simple_expression',3,'p_simple_expression','parser.py',514),
  ('simple_expression -> simple_expression MINUS term','simple_expression',3,'p_simple_expression','parser.py',515),
  ('simple_expression -> simple_expression OR term','simple_expression',3,'p_simple_expression','parser.py',516),
  ('term -> factor','term',1,'p_term','parser.py',523),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',524),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',525),
  ('term -> term DIV factor','term',3,'p_term','parser.py',526),
  ('term -> term MOD factor','term',3,'p_term','parser.py',527),
  ('term -> term AND factor','term',3,'p_term','parser.py',528),
  ('factor -> variable','factor',1,'p_factor','parser.py',535),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',536),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','parser.py',537),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',538),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',539),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',540),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',559),
]
